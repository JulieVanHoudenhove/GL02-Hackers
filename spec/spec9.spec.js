/**
 * @file spec9.spec.js
 * @description Tests unitaires pour la sp√©cification SPEC_09 - Consultation des salles sur ou sous-exploit√©es.
 *
 * @context Projet GL02 - Hackers
 *          SPEC_09 - Consultation des salles sur ou sous-exploit√©es.
 *          Le gestionnaire des locaux doit pouvoir identifier quelles salles sont sous-exploit√©es ou surexploit√©es afin de planifier des ajustements futurs.
 *
 * @author Th√©o TORREILLES
 * @version 1.0
 * @date D√©cembre 2024
 *
 * @tests
 * - V√©rifie la d√©tection des salles sous-exploit√©es en fonction du seuil.
 * - V√©rifie la d√©tection des salles sur-exploit√©es en fonction du seuil.
 * - V√©rifie la gestion d'une p√©riode sans donn√©es d'occupation.
 *
 * @dependencies
 * - Module personnalis√© 'spec9.js' : Contient la fonctionnalit√© √† tester.
 * - Node.js 'url' et 'path' modules : Utilis√©s pour d√©finir le r√©pertoire de travail en environnement ES6.
 *
 * @usage
 *   npx jasmine spec/spec9.spec.js
 */

// Importation des modules n√©cessaires pour les tests
import { analyzeOverUnderUtilizedRooms } from '../functions/spec9.js';
import { fileURLToPath } from 'url';
import path from 'path';

// Pour d√©finir le r√©pertoire du fichier courant en environnement ES6
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Tests unitaires pour la sp√©cification SPEC_09
describe('SPEC_09 - Consultation des salles sur ou sous-exploit√©es -', () => {
    const directory = path.resolve(__dirname, '../data');
    const startDate = new Date('2024-12-02');
    const endDate = new Date('2024-12-08');

    it('Devrait d√©tecter les salles sous-exploit√©es en fonction du seuil', () => {
        const underUtilizationThreshold = 20;
        const overUtilizationThreshold = 80;

        // Espionner console.log
        const spyLog = spyOn(console, 'log').and.callFake(() => {});

        analyzeOverUnderUtilizedRooms(directory, startDate, endDate, underUtilizationThreshold, overUtilizationThreshold, true);

        // V√©rifier qu'un message de salle sous-exploit√©e a √©t√© enregistr√©
        expect(spyLog).toHaveBeenCalledWith(jasmine.stringMatching(`üìâ Salles sous-exploit√©es \\(moins de ${underUtilizationThreshold}% d'occupation\\)`));
    });

    it('Devrait d√©tecter les salles sur-exploit√©es en fonction du seuil', () => {
        const underUtilizationThreshold = 20;
        const overUtilizationThreshold = 80;

        // Espionner console.log
        const spyLog = spyOn(console, 'log').and.callFake(() => {});

        analyzeOverUnderUtilizedRooms(directory, startDate, endDate, underUtilizationThreshold, overUtilizationThreshold, true);

        // V√©rifier qu'un message de salle sur-exploit√©e a √©t√© enregistr√©
        expect(spyLog).toHaveBeenCalledWith(jasmine.stringMatching(`üìà Salles sur-exploit√©es \\(plus de ${overUtilizationThreshold}% d'occupation\\)`));
    });
});
